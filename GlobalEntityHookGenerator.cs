using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using System.Text;

namespace TerraJSAnalyzer;

[Generator]
public class GlobalEntityHookGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // 第一步：找到所有带有AutoGlobalEntityHook特性的字段
        var fieldDeclarations = context.SyntaxProvider
            .ForAttributeWithMetadataName(
            "TerraJS.Contents.Attributes.AutoGlobalEntityHookAttribute",
            (syntaxNode, _) => CheckSyntaxNode(syntaxNode),
            (syntaxContext, _) => new GlobalEntityHookInfo()
            {
                FieldSymbol = (IFieldSymbol)syntaxContext.TargetSymbol,
                ManualSetDefaultValue = false,
                AssociatedAttribute = null
            });
        var fieldDeclarationsWithDefaultValue = context.SyntaxProvider
            .ForAttributeWithMetadataName(
            "TerraJS.Contents.Attributes.AutoGlobalEntityHookAttribute`1",
            (syntaxNode, _) => CheckSyntaxNode(syntaxNode),
            (syntaxContext, _) => new GlobalEntityHookInfo()
            {
                FieldSymbol = (IFieldSymbol)syntaxContext.TargetSymbol,
                ManualSetDefaultValue = true,
                AssociatedAttribute = syntaxContext.Attributes.FirstOrDefault(data => data.AttributeClass.ToDisplayString()
                .Contains("TerraJS.Contents.Attributes.AutoGlobalEntityHookAttribute"))
            });
        // 第二步：组合编译信息
        var compilationAndFields = context.CompilationProvider.Combine(Merge(fieldDeclarations, fieldDeclarationsWithDefaultValue).Collect());

        // 第三步：生成代码
        context.RegisterSourceOutput(compilationAndFields, static (spc, source) => Execute(source.Left, source.Right, spc));
    }

    private static IncrementalValuesProvider<T> Merge<T>(
    IncrementalValuesProvider<T> one,
    IncrementalValuesProvider<T> other)
    {
        return one.Collect()
            .Combine(other.Collect())
            .SelectMany((tuple, _) =>
            {
                List<T> merged = new List<T>(tuple.Left.Length + tuple.Right.Length);
                merged.AddRange(tuple.Left);
                merged.AddRange(tuple.Right);
                return merged;
            });
    }

    private static bool CheckSyntaxNode(SyntaxNode node)
    {
        return node is VariableDeclaratorSyntax variableDeclarator && variableDeclarator.ToString().EndsWith("Event");
    }

    private static string ToGlobalEntityClassName(string className) => $"TJSEventGlobal{ToGlobalEntityType(className)}";

    private static string ToGlobalEntityType(string className) => className.Replace("EventAPI", "");

    private static void Execute(Compilation _, ImmutableArray<GlobalEntityHookInfo> fields, SourceProductionContext context)
    {
        if (fields.IsDefaultOrEmpty)
            return;

        // 按类分组字段
        var groupedFields = fields
            .GroupBy(f => GetContainingClass(f));

        foreach (var group in groupedFields)
        {
            if (group.Key is not { } classInfo) continue;

            var sourceCode = GenerateClassSource(classInfo, group);
            context.AddSource($"{ToGlobalEntityClassName(classInfo.ClassName)}.g.cs", SourceText.From(sourceCode, Encoding.UTF8));
        }
    }

    private static ClassInfo? GetContainingClass(GlobalEntityHookInfo fieldInfo)
    {
        return new ClassInfo(fieldInfo.FieldSymbol.ContainingType.Name, fieldInfo.FieldSymbol.ContainingNamespace.ToDisplayString());
    }
    private static string GetPropertyLiteral(AttributeData attribute)
    {
        if (attribute.ConstructorArguments.Length == 0) return null;
        return attribute.ConstructorArguments[0].ToCSharpString();
    }
    private static string GenerateClassSource(ClassInfo classInfo, IEnumerable<GlobalEntityHookInfo> fields)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();

        sb.AppendLine("using TerraJS.Contents.Attributes;");

        sb.AppendLine($"namespace TerraJS.JSEngine.API.Events.EventBus.Global;");

        sb.AppendLine($"partial class {ToGlobalEntityClassName(classInfo.ClassName)}");
        sb.AppendLine("{");
        foreach (var field in fields)
        {
            if (field.FieldSymbol.Type is not INamedTypeSymbol namedType) continue;
            if (field.ManualSetDefaultValue) 
            {
                
            }
            var methodName = field.FieldName.Substring(0, field.FieldName.Length - "Event".Length);

            if (!namedType.IsGenericType)
            {
                sb.AppendLine($"    public override void {methodName}() => API.{field.FieldName}?.Invoke();");
            }
            else
            {
                var typeParameters = namedType.TypeArguments;
                bool isAction = namedType.ToDisplayString().Contains("Action");

                int length = typeParameters.Length;
                if (!isAction) length--;
                bool singleArgument = length == 1;
                sb.Append($"    public override {(isAction ? "void" : typeParameters.Last().ToDisplayString())} {methodName}(");
                if (singleArgument)
                {
                    sb.AppendLine($"{typeParameters[0].ToDisplayString()} arg1)");
                }
                else
                {
                    sb.AppendLine();
                    for (int n = 0; n < length; n++)
                    {
                        sb.AppendLine($"        {typeParameters[n].ToDisplayString()} arg{n + 1}{(n == length - 1 ? ")" : ",")}");
                    }
                }

                sb.AppendLine("    {");
                if (!isAction)
                    sb.AppendLine($"        return");

                sb.AppendLine($"        API.{field.FieldName}");
                sb.Append("        ?.Invoke(");
                if (!singleArgument)
                {
                    sb.AppendLine();
                    for (int n = 0; n < length; n++)
                    {
                        if (n != length - 1)
                            sb.AppendLine($"            arg{n + 1},");
                    }
                }


                if (isAction)
                {
                    if (singleArgument)
                        sb.AppendLine($"arg{length});");
                    else
                        sb.AppendLine($"            arg{length});");
                }
                else
                {
                    if (singleArgument)
                        sb.AppendLine($"arg{length})");
                    else
                        sb.AppendLine($"            arg{length})");
                    sb.Append("        ?? ");

                    if (field.ManualSetDefaultValue
                        && field.AssociatedAttribute is { } defaultValueAttribute
                        && GetPropertyLiteral(defaultValueAttribute) is { } defaultString)
                    {
                        sb.AppendLine($"{defaultString};");
                    }
                    else
                    {
                        sb.AppendLine();
                        sb.Append($"        base.{methodName}(");
                        if (singleArgument)
                            sb.AppendLine($"arg{length});");
                        else
                        {
                            sb.AppendLine();
                            for (int n = 0; n < length; n++)
                            {
                                if (n != length - 1)
                                    sb.AppendLine($"            arg{n + 1},");
                            }
                            sb.AppendLine($"            arg{length});");
                        }
                    }
                }

                // TODO 加上默认值
                sb.AppendLine("    }");
            }
            // 生成方法
            sb.AppendLine();
        }

        sb.AppendLine("}");

        return sb.ToString();
    }
}